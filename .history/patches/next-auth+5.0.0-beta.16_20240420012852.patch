diff --git a/node_modules/next-auth/src/index.tsx b/node_modules/next-auth/src/index.tsx
index 3e753e4..de1a0af 100644
--- a/node_modules/next-auth/src/index.tsx
+++ b/node_modules/next-auth/src/index.tsx
@@ -67,37 +67,33 @@
  * @module next-auth
  */
 
-import { Auth } from "@auth/core"
-import { reqWithEnvURL, setEnvDefaults } from "./lib/env.js"
-import { initAuth } from "./lib/index.js"
-import { signIn, signOut, update } from "./lib/actions.js"
+import { Auth } from "@auth/core";
+import { reqWithEnvURL, setEnvDefaults } from "./lib/env.js";
+import { initAuth } from "./lib/index.js";
+import { signIn, signOut, update } from "./lib/actions.js";
 
-import type { Session } from "@auth/core/types"
-import type { BuiltInProviderType } from "@auth/core/providers"
-import type {
-  GetServerSidePropsContext,
-  NextApiRequest,
-  NextApiResponse,
-} from "next"
-import type { AppRouteHandlerFn } from "./lib/types.js"
-import type { NextRequest } from "next/server"
-import type { NextAuthConfig, NextAuthRequest } from "./lib/index.js"
-export { AuthError, CredentialsSignin } from "@auth/core/errors"
+import type { Session } from "@auth/core/types";
+import type { BuiltInProviderType } from "@auth/core/providers";
+import type { GetServerSidePropsContext, NextApiRequest, NextApiResponse } from "next";
+import type { AppRouteHandlerFn } from "./lib/types.js";
+import type { NextRequest } from "next/server";
+import type { NextAuthConfig, NextAuthRequest } from "./lib/index.js";
+export { AuthError, CredentialsSignin } from "@auth/core/errors";
 
-export type {
-  Session,
-  Account,
-  Profile,
-  DefaultSession,
-  User,
-} from "@auth/core/types"
+export type User = {
+  id: string;
+  login?: string;
+  password?: string;
+  info?: {
+    name: string;
+    surname: string;
+  };
+};
 
-type AppRouteHandlers = Record<
-  "GET" | "POST",
-  (req: NextRequest) => Promise<Response>
->
+export type { Session, Account, Profile, DefaultSession } from "@auth/core/types";
 
-export type { NextAuthConfig }
+type AppRouteHandlers = Record<"GET" | "POST", (req: NextRequest) => Promise<Response>>;
+
+export type { NextAuthConfig };
 
 /**
  * The result of invoking {@link NextAuth|NextAuth}, initialized with the {@link NextAuthConfig}.
@@ -123,7 +119,7 @@ export interface NextAuthResult {
    * export const { handlers: { GET, POST }, auth } = NextAuth({...})
    * ```
    */
-  handlers: AppRouteHandlers
+  handlers: AppRouteHandlers;
   /**
    * A universal method to interact with NextAuth.js in your Next.js app.
    * After initializing NextAuth.js in `auth.ts`, use this method in Middleware, Server Components, Route Handlers (`app/`), and Edge or Node.js API Routes (`pages/`).
@@ -227,14 +223,10 @@ export interface NextAuthResult {
    * }
    * ```
    */
-  auth: ((
-    ...args: [NextApiRequest, NextApiResponse]
-  ) => Promise<Session | null>) &
+  auth: ((...args: [NextApiRequest, NextApiResponse]) => Promise<Session | null>) &
     ((...args: []) => Promise<Session | null>) &
     ((...args: [GetServerSidePropsContext]) => Promise<Session | null>) &
-    ((
-      ...args: [(req: NextAuthRequest) => ReturnType<AppRouteHandlerFn>]
-    ) => AppRouteHandlerFn)
+    ((...args: [(req: NextAuthRequest) => ReturnType<AppRouteHandlerFn>]) => AppRouteHandlerFn);
   /**
    * Sign in with a provider. If no provider is specified, the user will be redirected to the sign in page.
    *
@@ -278,26 +270,19 @@ export interface NextAuthResult {
    * ```
    *
    */
-  signIn: <
-    P extends BuiltInProviderType | (string & {}),
-    R extends boolean = true,
-  >(
+  signIn: <P extends BuiltInProviderType | (string & {}), R extends boolean = true>(
     /** Provider to sign in to */
     provider?: P, // See: https://github.com/microsoft/TypeScript/issues/29729
     options?:
       | FormData
       | ({
           /** The URL to redirect to after signing in. By default, the user is redirected to the current page. */
-          redirectTo?: string
+          redirectTo?: string;
           /** If set to `false`, the `signIn` method will return the URL to redirect to instead of redirecting automatically. */
-          redirect?: R
+          redirect?: R;
         } & Record<string, any>),
-    authorizationParams?:
-      | string[][]
-      | Record<string, string>
-      | string
-      | URLSearchParams
-  ) => Promise<R extends false ? any : never>
+    authorizationParams?: string[][] | Record<string, string> | string | URLSearchParams
+  ) => Promise<R extends false ? any : never>;
   /**
    * Sign out the user. If the session was created using a database strategy, the session will be removed from the database and the related cookie is invalidated.
    * If the session was created using a JWT, the cookie is invalidated.
@@ -323,13 +308,13 @@ export interface NextAuthResult {
    */
   signOut: <R extends boolean = true>(options?: {
     /** The URL to redirect to after signing out. By default, the user is redirected to the current page. */
-    redirectTo?: string
+    redirectTo?: string;
     /** If set to `false`, the `signOut` method will return the URL to redirect to instead of redirecting automatically. */
-    redirect?: R
-  }) => Promise<R extends false ? any : never>
+    redirect?: R;
+  }) => Promise<R extends false ? any : never>;
   unstable_update: (
     data: Partial<Session | { user: Partial<Session["user"]> }>
-  ) => Promise<Session | null>
+  ) => Promise<Session | null>;
 }
 
 /**
@@ -358,16 +343,14 @@ export interface NextAuthResult {
  * ```
  */
 export default function NextAuth(
-  config:
-    | NextAuthConfig
-    | ((request: NextRequest | undefined) => NextAuthConfig)
+  config: NextAuthConfig | ((request: NextRequest | undefined) => NextAuthConfig)
 ): NextAuthResult {
   if (typeof config === "function") {
     const httpHandler = (req: NextRequest) => {
-      const _config = config(req)
-      setEnvDefaults(_config)
-      return Auth(reqWithEnvURL(req), _config)
-    }
+      const _config = config(req);
+      setEnvDefaults(_config);
+      return Auth(reqWithEnvURL(req), _config);
+    };
 
     return {
       handlers: { GET: httpHandler, POST: httpHandler } as const,
@@ -375,36 +358,36 @@ export default function NextAuth(
       auth: initAuth(config, (c) => setEnvDefaults(c)),
 
       signIn: (provider, options, authorizationParams) => {
-        const _config = config(undefined)
-        setEnvDefaults(_config)
-        return signIn(provider, options, authorizationParams, _config)
+        const _config = config(undefined);
+        setEnvDefaults(_config);
+        return signIn(provider, options, authorizationParams, _config);
       },
       signOut: (options) => {
-        const _config = config(undefined)
-        setEnvDefaults(_config)
-        return signOut(options, _config)
+        const _config = config(undefined);
+        setEnvDefaults(_config);
+        return signOut(options, _config);
       },
       unstable_update: (data) => {
-        const _config = config(undefined)
-        setEnvDefaults(_config)
-        return update(data, _config)
+        const _config = config(undefined);
+        setEnvDefaults(_config);
+        return update(data, _config);
       },
-    }
+    };
   }
-  setEnvDefaults(config)
-  const httpHandler = (req: NextRequest) => Auth(reqWithEnvURL(req), config)
+  setEnvDefaults(config);
+  const httpHandler = (req: NextRequest) => Auth(reqWithEnvURL(req), config);
   return {
     handlers: { GET: httpHandler, POST: httpHandler } as const,
     // @ts-expect-error
     auth: initAuth(config),
     signIn: (provider, options, authorizationParams) => {
-      return signIn(provider, options, authorizationParams, config)
+      return signIn(provider, options, authorizationParams, config);
     },
     signOut: (options) => {
-      return signOut(options, config)
+      return signOut(options, config);
     },
     unstable_update: (data) => {
-      return update(data, config)
+      return update(data, config);
     },
-  }
+  };
 }
